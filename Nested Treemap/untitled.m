clear; close all; clc;

d = { ...
    'Brighton & Hove', 'Books', 610.00; ...
    'Brighton & Hove', 'Electronics', 855.00; ...
    'Brighton & Hove', 'Hardware', 998.00; ...
    'Brighton & Hove', 'Software', 2020.00; ...
    'Chichester', 'Home & Garden', 396.00; ...
    'Chichester', 'Health & Beauty', 580.00; ...
    'Chichester', 'Sports', 613.00; ...
    'Chichester', 'Software', 885.00; ...
    'Chichester', 'Electronics', 891.00; ...
    'Chichester', 'DIY', 1449.00; ...
    'Portsmouth', 'Books', 268.00; ...
    'Portsmouth', 'Home & Garden', 390.00; ...
    'Portsmouth', 'Electronics', 690.00; ...
    'Portsmouth', 'DIY', 834.00; ...
    'Portsmouth', 'Sports', 1008.00; ...
    'Portsmouth', 'Clothes', 1016.00; ...
    'Portsmouth', 'Toys & Children', 1201.00; ...
    'Southampton', 'DIY', 169.00; ...
    'Southampton', 'Hardware', 604.00; ...
    'Southampton', 'Electronics', 757.00; ...
    'Southampton', 'Sports', 1567.00; ...
    'Winchester', 'Hardware', 524.00; ...
    'Winchester', 'Sports', 541.00; ...
    'Winchester', 'Books', 806.00; ...
    'Winchester', 'Software', 991.00; ...
    'Winchester', 'Toys & Children', 1079.00; ...
    'Winchester', 'Electronics', 1661.00 ...
};

% Get unique branches and assign colors
b = unique(d(:,1));
branch_colors = lines(length(b)); % Each branch gets a unique color

% Prepare figure
figure('Position', [100, 100, 900, 700]);
hold on;

% Calculate total revenue per branch
br = zeros(length(b),1);
for i = 1:length(b)
    br(i) = sum(cell2mat(d(strcmp(d(:,1), b{i}), 3)));
end

% Create treemap layout
r = treemap(br / sum(br));

% Plot each branch
for i = 1:length(b)
    % Get products for this branch
    branch_data = d(strcmp(d(:,1), b{i}), :);
    products = unique(branch_data(:,2));
    product_revenue = zeros(length(products),1);
    
    % Calculate product revenues
    for j = 1:length(products)
        product_revenue(j) = sum(cell2mat(branch_data(strcmp(branch_data(:,2), products{j}), 3)));
    end
    
    % Create product rectangles within branch
    rb = treemap(product_revenue / br(i), r(3,i), r(4,i));
    rb(1,:) = rb(1,:) + r(1,i);
    rb(2,:) = rb(2,:) + r(2,i);
    
    % Draw branch outline
    rectangle('Position', [r(1,i), r(2,i), r(3,i), r(4,i)], ...
              'EdgeColor', branch_colors(i,:), 'LineWidth', 2);
    
    % Draw all product rectangles with branch color (different shades)
    for k = 1:length(products)
        rn = treemap(product_revenue(k)/br(i), rb(3,k), rb(4,k));
        rn(1,:) = rn(1,:) + rb(1,k);
        rn(2,:) = rn(2,:) + rb(2,k);
        
        % Use same base color but vary brightness
        color = branch_colors(i,:) * (0.7 + 0.3*(k/length(products)));
        
        rectangle('Position', [rn(1), rn(2), rn(3), rn(4)], ...
                  'FaceColor', color, 'EdgeColor', 'w');
        
        % Add product label if space permits
        if rn(3) > 0.05 && rn(4) > 0.03
            if length(products{k}) > 10
                text(rn(1)+0.5*rn(3), rn(2)+0.5*rn(4), products{k}, ...
                    'HorizontalAlignment', 'center', 'VerticalAlignment', 'middle', ...
                    'Rotation', 90, 'Color', 'k', 'FontSize', 8);
            else
                text(rn(1)+0.5*rn(3), rn(2)+0.5*rn(4), products{k}, ...
                    'HorizontalAlignment', 'center', 'VerticalAlignment', 'middle', ...
                    'Color', 'k', 'FontSize', 8);
            end
        end
    end
    
    % Add branch label
    bc = [mean([r(1,i), r(1,i)+r(3,i)]), r(2,i)+r(4,i)+0.03];
    text(bc(1), bc(2), b{i}, 'HorizontalAlignment', 'center', ...
         'VerticalAlignment', 'bottom', 'Color', branch_colors(i,:), ...
         'FontWeight', 'bold', 'FontSize', 10);
end

% Add legend for branches
legend_items = cell(length(b),1);
for i = 1:length(b)
    legend_items{i} = patch([0,0,0,0], [0,0,0,0], branch_colors(i,:));
end
legend([legend_items{:}], b, 'Location', 'eastoutside', ...
       'FontSize', 8, 'Box', 'off');

axis([-0.01 1.01 -0.01 1.01]);
title('Sales by Branch (Consistent Colors)', 'FontSize', 14, 'FontWeight', 'bold');
hold off;